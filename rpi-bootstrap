#!/bin/bash

set -exuo pipefail

. config

wpa_country=${WPA_COUNTRY}
wpa_ssid=${WPA_SSID}
# WPA_PSK should be the hash generated using `wpa_passphrase $WPA_SSID`
wpa_psk=${WPA_PSK}
provisioner_url=${PROVISIONER_URL}
provisioner_port=${PROVISIONER_PORT}
provisioner_pubkey=${PROVISIONER_PUBKEY}
# authorization_token=${AUTHORIZATION_TOKEN}

# Must be passed as an argument; make sure it is the correct device
# that the SD card you want to write the image to is shown as!
# Example invokation with the SD card shown by `lsblk` as `/dev/sda`: `./rpi-bootstrap /dev/sda`
sd_card=${1}

rpi_release="2019-04-08-raspbian-stretch-lite"
curdir=$(pwd)
tmpdir="/tmp"
workdir="${curdir}/work"
mkdir -p ${workdir}
image="${workdir}/${rpi_release}.img"
archive="${workdir}/${rpi_release}.zip"

if ! [ -f "${image}" ]; then
    echo "No raspbian image found, fetching..."
    if ! [ -f "${archive}" ]; then
        echo "No raspbian image archive found, downloading ${rpi_release}..."
        pushd ${workdir}
        curl -LO http://director.downloads.raspberrypi.org/raspbian_lite/images/raspbian_lite-2019-04-09/${rpi_release}.zip
        popd
        archive_checksum="$(cat ${archive} | sha256sum | awk -F ' ' '{print $1}')"
        # Checksum for 2019-04-08-raspbian-stretch-lite.zip noted at https://www.raspberrypi.org/downloads/raspbian/
        checksum="03ec326d45c6eb6cef848cf9a1d6c7315a9410b49a276a6b28e67a40b11fdfcf"
        if ! [ "${checksum}" = "${archive_checksum}" ]; then
            echo "bad checksum - try again or update \$hash for newer release"
            rm ${archive}
            exit 1
        fi
    else
        echo "Raspbian image archive found, skipping download and extracting..."
    fi
    unzip ${archive} -d ${workdir}/
fi

[ -f "${image}" ]

tmpworkdir="${tmpdir}/rpi-bootstrap-work"
sudo mkdir -p ${tmpworkdir}
tmpimage="${tmpworkdir}/${rpi_release}.img"
sudo cp ${image} ${tmpimage}

[ -f "${tmpimage}" ]

# TODO: use guestfish which doesn't require sudo or loop devices
sudo losetup -f ${tmpimage}
# TODO: currently this sources all loop devices set up with this image. Should identify images uniquely so only performing on one.
loopdevice="$(sudo losetup -l | grep ${tmpimage} | awk -F ' ' '{print $1}')"
# Just try partx; if it fails assume a previous partition was already successful.
# TODO: find a way to do this in partx idempotently.
sudo partx -a ${loopdevice} || true
# TODO: see if rootfs can be set by info from partx.
rootfs="/dev/$(lsblk -lf ${loopdevice} | grep rootfs | awk -F ' ' '{print $1}')"

mountdir="${tmpdir}/rpi-bootstrap-${tmpimage}.d"
sudo mkdir -p ${mountdir}
sudo mount ${rootfs} ${mountdir}
# Enable ssh
sudo ln -s /lib/systemd/system/ssh.service ${mountdir}/etc/systemd/system/sshd.service
sudo ln -s /lib/systemd/system/ssh.service ${mountdir}/etc/systemd/system/multi-user.target.wants/ssh.service
# Wireless config
sudo cat <<EOF > ${workdir}/wpa_supplicant.conf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=${wpa_country}
network={
    ssid="${wpa_ssid}"
    psk=${wpa_psk}
}
EOF
sudo mv ${workdir}/wpa_supplicant.conf ${mountdir}/etc/wpa_supplicant/wpa_supplicant.conf
# Checkin client
# TODO: add via generic filesystem config.
cat <<EOF > ${workdir}/rpi-provision-checkin.service
[Unit]
Description=Check in to a rpi-provision server to request provisioning. Once provisioning is complete, this unit should be stopped and disabled by the server.
Before=systemd-user-sessions.service
Wants=network-online.target
After=network-online.target

[Service]
Restart=always
RestartSec=2
RemainAfterExit=yes
ExecStart=/usr/bin/curl --request POST --header "Content-Type: application/json" --data "{ \"ssh_port\": 22, \"ssh_user\": \"pi\" }" --url http://${provisioner_url}:${provisioner_port}/v0/checkin/

[Install]
WantedBy=multi-user.target
EOF
sudo mv ${workdir}/rpi-provision-checkin.service ${mountdir}/lib/systemd/system/rpi-provision-checkin.service
sudo ln -s /lib/systemd/system/rpi-provision-checkin.service ${mountdir}/etc/systemd/system/multi-user.target.wants/rpi-provision-checkin.service
# Provisioner pubkey
sudo mkdir -p ${mountdir}/home/pi/.ssh
echo ${provisioner_pubkey} >> ${workdir}/provisioner_pubkey
sudo mv ${workdir}/provisioner_pubkey ${mountdir}/home/pi/.ssh/authorized_keys

sudo umount ${mountdir}
sudo rmdir ${mountdir}
sudo losetup -d ${loopdevice}
out_image="${workdir}/${rpi_release}.out.img"
sudo mv -f ${tmpimage} ${out_image}
sudo rmdir ${tmpworkdir}

# TODO: split this into a separate stage
sudo dd if=${out_image} of=${sd_card} bs=4M oflag=dsync status=progress
sync
